---
title: "neuro-conda"
subtitle: "A Python Distribution for Neuroscience"
author:
  - Stefan F√ºrtinger
  - Joscha Tapani Schmiedt
date: November 9 2023
date-format: long
institute:
  - Ernst Str√ºngmann Institute </br> Frankfurt
  - Brain Research Institute </br> Universit√§t Bremen
title-slide-attributes:
  data-background-image: css/esi_bg.png
format:
  revealjs:
    theme: [white, css/esi.scss]
    slide-number: c
    menu: true
    progress: true
    chalkboard:
      buttons: false
    preview-links: auto
    code-line-numbers: false
    highlight-style: github
    auto-play-media: true
    pdf-separate-fragments: true
    transition: slide
include-after-body: css/esi_borders.html
revealjs-plugins:
  - attribution
filters:
  - reveal-auto-agenda
auto-agenda:
  bullets: none
  heading: Outline
---
<!--
SPDX-FileCopyrightText: 2023 Ernst Str√ºngmann Institute (ESI) for Neuroscience
in Cooperation with Max Planck Society
SPDX-License-Identifier: CC-BY-NC-SA-1.0
-->

```{=html}
<section class="title-slide slide level1 agenda-slide center" data-transition="none">
<div class="agenda-heading">
<p>Outline</p>
</div>
<div class="agenda">
<div class="agenda-active">
<p>Why</p>
</div>
<div class="agenda-active">
<p>What</p>
</div>
<div class="agenda-active">
<p>How</p>
</div>
</div>
</section>
```

# Why

## Python is Great!

::: {.fragment .absolute top="2em"}
Data Analysis!

```{.python style="font-size: 0.6em; "}
[1]: import numpy as np
     import seaborn as sns
     sns.set_theme(style="ticks")

     rs = np.random.RandomState(11)
     x = rs.gamma(2, size=1000)
     y = -.5 * x + rs.normal(size=1000)

     sns.jointplot(x=x, y=y, kind="hex", color="#4CB391")
```
![](imgs/seaborn.png){.absolute width="50%"}

:::

::: {.fragment .absolute right="2.5em" top="2em"}
Statistics!

```{.python style="font-size: 0.6em; "}
[1]: import statsmodels.api as sm
     x = np.linspace(0, 10, 100); X = np.column_stack((x, x ** 2))
     beta = np.array([1, 0.1, 10]); e = np.random.normal(size=100)
     X = sm.add_constant(X); y = np.dot(X, beta) + e
     model = sm.OLS(y, X); results = model.fit()
     print(results.summary())

                                 OLS Regression Results
     ==============================================================================
     Dep. Variable:                      y   R-squared:                       1.000
     Model:                            OLS   Adj. R-squared:                  1.000
     Method:                 Least Squares   F-statistic:                 4.020e+06
     Date:                Wed, 25 Oct 2023   Prob (F-statistic):          2.83e-239
     Time:                        11:13:17   Log-Likelihood:                -146.51
     No. Observations:                 100   AIC:                             299.0
     Df Residuals:                      97   BIC:                             306.8
     Df Model:                           2
     Covariance Type:            nonrobust
     ==============================================================================
                      coef    std err          t      P>|t|      [0.025      0.975]
     ------------------------------------------------------------------------------
     const          1.3423      0.313      4.292      0.000       0.722       1.963
     x1            -0.0402      0.145     -0.278      0.781      -0.327       0.247
     x2            10.0103      0.014    715.745      0.000       9.982      10.038
     ==============================================================================
     Omnibus:                        2.042   Durbin-Watson:                   2.274
     Prob(Omnibus):                  0.360   Jarque-Bera (JB):                1.875
     Skew:                           0.234   Prob(JB):                        0.392
     Kurtosis:                       2.519   Cond. No.                         144.
     ==============================================================================

```
:::

::: {.fragment .absolute right="0em" top="2em"}
[Machine Learning!]{style="background-color: white; "}

```{.python style="font-size: 0.6em; "}
[1]:
from sklearn.cluster import MeanShift, estimate_bandwidth
from sklearn.datasets import make_blobs

centers = [[1, 1], [-1, -1], [1, -1]]
X, _ = make_blobs(n_samples=10000, centers=centers, cluster_std=0.6)
bandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=500)
ms = MeanShift(bandwidth=bandwidth, bin_seeding=True)
ms.fit(X)
```
![](imgs/sklearn.png){.absolute width="50%"}
:::

::: {.attribution}
See [seaborn](https://seaborn.pydata.org/examples/hexbin_marginals.html), [statsmodels](https://www.statsmodels.org/stable/examples/notebooks/generated/ols.html) and [scikit-learn](https://scikit-learn.org/stable/auto_examples/cluster/plot_mean_shift.html#sphx-glr-auto-examples-cluster-plot-mean-shift-py)
:::

## Just Install It!

::: {.r-stack}
![](imgs/pythondocu.gif)
:::

::: {.attribution}
See the [Official Python Documentation](https://docs.python.org/3/using/windows.html)
:::

## "Just" Install It!

::: {.r-stack}
![](imgs/conda_xkcd.png)
:::

::: {.attribution}
Taken from [xkcd](https://xkcd.com/1987/)
:::

## Just Use Conda!

::: {.fragment .absolute}
![](imgs/conda_glibc.png)
:::

::: {.fragment .absolute top="5em" left="2em"}
![](imgs/conda_qt.png)
:::

::: {.fragment .absolute left="4em" top="1.5em"}
![](imgs/conda.gif){width="100%"}

::: {.attribution}
See the [Official conda Documentation](https://docs.conda.io/projects/conda/en/latest/user-guide/troubleshooting.html)
:::

:::

# What

## neuro-conda üß†üêç

A Python Distribution for Neuroscience

::: {.incremental}
- use [conda]{.esi-emph} without having to use conda
- [simplifies]{.esi-emph} learning and using Python in neuroscience
- [bundles]{.esi-emph} commonly used neuroscience packages into curated conda environments
- supports [{{< fa brands windows >}} Windows]{.esi-emph}, [{{< fa brands apple >}} macOS]{.esi-emph} and [{{< fa brands linux >}} Linux]{.esi-emph}
:::

. . .

**What's Inside?**

## Electrophsysiology (Spikes + LFP)

![](imgs/brian_logo_big.png){.absolute width="20%"}
![](imgs/elephant_logo_sidebar.png){.absolute width="20%" top="10em"}
![](imgs/viziphant_logo_sidebar.png){.absolute width="20%" left="6em" top="6em"}
![](imgs/syncopy_logo.png){.absolute width="20%" left="6em"}
![](imgs/neurotic-logo-150.png){.absolute width="15%" left="12em"}
![](imgs/pynapple_logo.png){.absolute width="25%" left="14em" top="7em"}
![](imgs/circus.png){.absolute width="25%" left="18em"}
![](imgs/spikeinterface.png){.absolute width="10%" top="6em"}
![](imgs/suite2p_logo.png){.absolute width="15%" left="22em" top="9em"}

## Electrophysiology (LFP + M/EEG) + Neuroimaging

![](imgs/mne_logo.png){.absolute width="30%"}
![](imgs/eelbrain.png){.absolute width="20%" top="9em"}
![](imgs/mne_bids.png){.absolute width="40%" left="8em"}
![](imgs/mnelab_logo.png){.absolute width="30%" left="9em" top="6em"}
![](imgs/mne_nirs_logo_small.png){.absolute width="30%" left="6em" top="9em"}
![](imgs/mne_realtime.png){.absolute width="30%" left="7em" top="12em"}
![](imgs/neurokit.png){.absolute width="15%" left="19em"}
![](imgs/dipy-logo.png){.absolute width="20%" left="18em" top="11em"}

## Machine Learning + Parallelization

![](imgs/nilearn-transparent.png){.absolute width="15%"}
![](imgs/nipype-banner-bg.png){.absolute width="50%" top="8em"}
![](imgs/nitime-banner-bg.png){.absolute width="50%" left="6em"}
![](imgs/pytorch-logo-dark.png){.absolute width="30%" left="9em" top="6em"}
![](imgs/scikit-learn-logo-small.png){.absolute width="20%" left="13em" top="10em"}
![](imgs/tensorflow.png){.absolute width="30%" top="12em"}
![](imgs/dask.png){.absolute width="30%" left="21em" top="6em"}
![](imgs/acme_logo.png){.absolute width="15%" left="21em"}

## Data, Formats, Coding

![](imgs/black.png){.absolute width="20%"}
![](imgs/hdf5.png){.absolute width="15%" left="6em"}
![](imgs/imageio_logo.png){.absolute width="10%" left="12em"}
![](imgs/jupyter.png){.absolute width="10%" left="16em"}
![](imgs/Rlogo.png){.absolute width="12%" left="21em"}
![](imgs/numpy.png){.absolute width="20%" top="5.5em"}
![](imgs/scipy.png){.absolute width="15%" left="6em" top="6em"}
![](imgs/matplotlib.png){.absolute width="20%" left="11em" top="6em"}
![](imgs/seaborn_logo.png){.absolute width="20%" left="18em" top="6em"}

![](imgs/neologo.png){.absolute width="20%" top="10em"}
![](imgs/nibabel-logo.png){.absolute width="15%" top="10em" left="6em"}
![](imgs/nix_logo.png){.absolute width="15%" top="10em" left="12em"}
![](imgs/deid.png){.absolute width="20%" top="10em" left="17em"}
![](imgs/pynwb.png){.absolute width="20%" top="10em" left="22em"}

# How

## Just Install It!

## Just Install It! (No, Really) {transition="none"}

. . .

::: {style="height: 1em; "}
:::

{{< fa brands windows >}} Windows 10/11 (PowerShell)

```{.powershell style="font-size: 0.9em; "}
Invoke-WebRequest `
https://raw.githubusercontent.com/neuro-conda/neuro-conda/main/libexec/install.ps1 `
-OutFile $Env:temp\install_neuroconda.ps1; `
Invoke-Expression $Env:temp\install_neuroconda.ps1;
```

. . .

::: {style="height: 1em; "}
:::

{{< fa brands apple >}} macOS + {{< fa brands linux >}} Linux

```{.bash style="font-size: 0.9em; "}
/bin/bash -c "$(curl -fsSL \
https://raw.githubusercontent.com/neuro-conda/neuro-conda/main/libexec/install.sh)"
```

## {{< fa brands windows >}} Windows 10/11 (PowerShell)

::: {.r-stack}
![](imgs/powershell_scriptblock.gif){.fragment .fade-in-then-out .absolute height="88%" left="2em"}
![](imgs/powershell_block.png){.fragment .fade-in-then-out .absolute top="2em" left="0em"}

::: {.fragment .fade-in-then-out .absolute top="1.7em" left="0em"}
![](imgs/powershell_execpol1.png)

```{.powershell style="font-size: 0.9em; "}
Set-ExecutionPolicy -ExecutionPolicy ByPass -Scope Process
```
:::

![](imgs/powershell_execpol2.png){.fragment .fade-in-then-out .absolute top="2em" left="0em"}
![](imgs/powershell_neuroconda.png){.fragment .fade-in-then-out .absolute top="2em" left="0em"}

:::


## {{< fa brands apple >}} macOS + {{< fa brands linux >}} Linux

::: {.r-stack}
![](imgs/macos_neuroconda.gif){.fragment .fade-in-then-out .absolute height="90%" left="2.5em" top="1.7em"}
:::

## Usage {auto-animate="true"}

. . .

{{< fa brands windows >}} Open a PowerShell window

```{data-id="pwsh1"}
(neuro-conda-2023b) PS C:\Users\myusername > _
```

## Usage {auto-animate="true"}

{{< fa brands windows >}} Open a PowerShell window

```{data-id="pwsh1"}
(neuro-conda-2023b) PS C:\Users\myusername > _
(neuro-conda-2023b) PS C:\Users\myusername > ipython
```

## Usage {auto-animate="true"}

{{< fa brands windows >}} Open a PowerShell window

```{data-id="pwsh1"}
(neuro-conda-2023b) PS C:\Users\myusername > _
(neuro-conda-2023b) PS C:\Users\myusername > ipython
Python 3.10.12 (main, Jul  5 2023, 18:54:27) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.12.0 -- An enhanced Interactive Python. Type '?' for help

In [1]: _
```

## Usage {auto-animate="true"}

{{< fa brands windows >}} Open a PowerShell window

```{data-id="pwsh1"}
(neuro-conda-2023b) PS C:\Users\myusername > _
(neuro-conda-2023b) PS C:\Users\myusername > ipython
Python 3.10.12 (main, Jul  5 2023, 18:54:27) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.12.0 -- An enhanced Interactive Python. Type '?' for help

In [1]: _
```

{{< fa brands apple >}} + {{< fa brands linux >}} Open a terminal window

. . .

```{data-id="term1"}
(neuro-conda-2023b) myusername@mycomputer ~ % _
```

## Usage {auto-animate="true"}

{{< fa brands windows >}} Open a PowerShell window

```{data-id="pwsh1"}
(neuro-conda-2023b) PS C:\Users\myusername > _
(neuro-conda-2023b) PS C:\Users\myusername > ipython
Python 3.10.12 (main, Jul  5 2023, 18:54:27) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.12.0 -- An enhanced Interactive Python. Type '?' for help

In [1]: _
```

{{< fa brands apple >}} + {{< fa brands linux >}} Open a terminal window

```{data-id="term1"}
(neuro-conda-2023b) myusername@mycomputer ~ % _
(neuro-conda-2023b) myusername@mycomputer ~ % ipython
```

## Usage {auto-animate="true"}

{{< fa brands windows >}} Open a PowerShell window

```{data-id="pwsh1"}
(neuro-conda-2023b) PS C:\Users\myusername > _
(neuro-conda-2023b) PS C:\Users\myusername > ipython
Python 3.10.12 (main, Jul  5 2023, 18:54:27) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.12.0 -- An enhanced Interactive Python. Type '?' for help

In [1]: _
```

{{< fa brands apple >}} + {{< fa brands linux >}} Open a terminal window

```{data-id="term1"}
(neuro-conda-2023b) myusername@mycomputer ~ % _
(neuro-conda-2023b) myusername@mycomputer ~ % ipython
Python 3.10.11 (main, Jul 5 2023, 13:41:39) [Clang 14.0.6 ]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.12.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: _
```

## Happy Pythoning!

::: {.absolute top="1.5em" style="font-size: 3em; "}
neuro-conda üß†üêç
:::

::: {.absolute top="9em"}
[Documentation:]{.esi-emph}

[https://github.com/neuro-conda/neuro-conda#readme](https://github.com/neuro-conda/neuro-conda#readme)

[Questions/Problems:]{.esi-emph}

[https://github.com/neuro-conda/neuro-conda/issues](https://github.com/neuro-conda/neuro-conda/issues)
:::

## {background-image="css/esi_bg.png" style="color: white; "}

![](css/esi_logo_white.png){.absolute width="20%" right="-3em" top="-1em"}

::: {.absolute top="0em" style="font-size: 2em; "}
Thank You For Your Attention!
:::

![](imgs/me.jpeg){.absolute top="4em" left="3em" width="16%"}
[Stefan]{.absolute top="9.5em" left="4.5em" style="font-size: 0.9em; "}
[{{< fa brands github >}} [@pantaray](https://github.com/pantaray){style="color: white; "}]{.absolute top="5.8em" left="9.5em" style="font-size: 0.9em; "}
[{{< fa envelope >}} [stefan.fuertinger@esi-frankfurt.de](mailto:stefan.fuertinger@esi-frankfurt.de){style="color: white; "}]{.absolute top="7.2em" left="9.5em" style="font-size: 0.9em; "}

![](imgs/joscha.jpeg){.absolute top="10em" left="3em" width="16%"}
[Joscha]{.absolute top="16.1em" left="4.2em" style="font-size: 0.9em; "}
[{{< fa brands github >}} [@joschaschmiedt](https://github.com/joschaschmiedt){style="color: white; "}]{.absolute top="12.5em" left="9.5em" style="font-size: 0.9em; "}
[{{< fa envelope >}} [schmiedt@brain.uni-bremen.de](mailto:schmiedt@brain.uni-bremen.de){style="color: white; "}]{.absolute top="13.9em" left="9.5em" style="font-size: 0.9em; "}

::: footer
[[www.esi-frankfurt.de]{style="font-size: 1.5em; color: white; "}](https://www.esi-frankfurt.de)
:::
